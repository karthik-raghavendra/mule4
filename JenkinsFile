pipeline {
    agent {
        node {
            label 'master'
        }
    }
    tools {
        maven 'maven'
    }
    stages {
        stage ('CleanWorkspace') {
            steps {
                cleanWs()
                sh ''' echo "Cleaning workspace..."'''
            }
        }
    
        stage ('Checkout') {
            environment {
                BB_URL="${BB_URL}"
                BB_BR="${BB_BRANCH}"
                BB_USER="${BB_USER}"
            }
            steps {
                git(
                    url: BB_URL,
                    credentialsId: BB_USER,
                    branch: BB_BR
                )
            }
        }
        
        stage ('Build') {
            environment {
                projDir="${MULE_PROJ_DIR}"
                //sh 'printenv'
                VERSION=readMavenPom().getVersion()
                IMAGE=readMavenPom().getArtifactId()
            }
            steps {
                echo 'Running Maven Clean and Package the Artifact ...'
                echo "The jar name is ${IMAGE}-${VERSION}-mule-application.jar"
                sh '''mvn clean package -Dhttps.protocols=TLSv1.2 -DskipTests
                cp target/*.jar ${IMAGE}-${VERSION}-mule-application.jar
                '''
            }
        }
        
        stage ('Running Munit test') {
            steps {
                echo 'Running custom tests ...'
                sh 'mvn test -P${MAVEN_PROFILE}'
				publishHTML target: [
					allowMissing: false,
					alwaysLinkToLastBuild: false,
					keepAll: true,
					reportDir: 'target/site/munit/coverage',
					reportFiles: 'summary.html',
					reportName: 'Coverage Report'
				]
            }
        }
        
        stage ('Analysis') {
            environment {
                projDir="${MULE_PROJ_DIR}"
            }
            steps {
                echo 'Running Static Code Analyzer ...'
                withSonarQubeEnv('sonarcube') {
                sh 'mvn sonar:sonar -Dsonar.language=mule4 -Dsonar.sources=src'
                }
            }
        }
        
        stage("Quality Gate") {
            steps {
                timeout(time: 60, unit: 'SECONDS') {
                    // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                    // true = set pipeline to UNSTABLE, false = don't
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        
        stage ('NexusUpload') {
            environment {
                VERSION=readMavenPom().getVersion()
                IMAGE=readMavenPom().getArtifactId()
                GROUP_ID=readMavenPom().getGroupId()
            }
            steps {
                sh 'printenv'
                nexusArtifactUploader(
                    artifacts: [[artifactId: "$IMAGE-$VERSION-mule-application", classifier: '', file:"$IMAGE-$VERSION-mule-application.jar", type: 'jar']],
                    credentialsId: 'nexus-id',
                    groupId: "$GROUP_ID",
                    nexusUrl: '40.77.62.209:8081/nexus',
                    nexusVersion: 'nexus2',
                    protocol: 'http',
                    repository: 'releases',
                    version: '$BUILD_NUMBER'
                )
            }
        }
    }
}
